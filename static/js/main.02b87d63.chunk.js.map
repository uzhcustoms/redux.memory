{"version":3,"sources":["features/counter/counterSlice.js","features/counter/Counter.js","App.js","app/store.js","index.js"],"names":["initialState","counter","cells","Array","from","val","i","length","j","size","value","visible","sort","Math","random","counterSlice","createSlice","name","reducers","addElem","state","action","trunc","payload","previusValue","actions","selectCells","flat","Counter","useSelector","console","log","dispatch","useDispatch","handleClick","e","target","id","className","map","item","idx","style","width","transition","onClick","disabled","App","store","configureStore","reducer","counterReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAQA,I,0DAHMA,EAAe,CAACC,QAAS,EAAGC,MAAOC,MAAMC,KAAKD,MADvC,IACoD,kBAAM,IAAIA,MAD9D,OAGTE,EAAM,EACFC,EAAI,EAAGA,EAAGN,EAAaE,MAAMK,OAAQD,IAE3C,IAAK,IAAIE,EAAI,EAAGA,EAAGR,EAAaE,MAAMI,GAAGC,OAAQC,IACpCC,GAAPJ,IACFA,EAAM,GAERL,EAAaE,MAAMI,GAAGE,GAAK,CAACE,MAAOL,EAAKM,SAAS,GACjDN,IAGJ,IAAI,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IACrB,IAAI,IAAIF,EAAI,EAAGA,EAAGN,EAAaE,MAAMK,OAAQD,IAC3CN,EAAaE,MAAMI,GAAGM,MAAK,kBAAMC,KAAKC,SAAW,MACjDd,EAAaE,MAAMU,MAAK,kBAAMC,KAAKC,SAAW,MAI3C,IAAMC,EAAeC,YAAY,CACtCC,KAAM,UACNjB,eACAkB,SAAU,CACRC,QAAS,SAACC,EAAOC,GAEf,IAAIf,EAAIO,KAAKS,MAAMD,EAAOE,QA3BnB,GA4BHf,EAAIa,EAAOE,QA5BR,EA4BkBV,KAAKS,MAAMD,EAAOE,QA5BpC,GA8BPH,EAAMlB,MAAMI,GAAGE,GAAGG,SAAU,EACtBS,EAAMnB,QAAU,GAAK,EACvBmB,EAAMI,aAAe,CAAClB,EAAGA,EAAGE,EAAGA,GAE5BY,EAAMlB,MAAMkB,EAAMI,aAAalB,GAAGc,EAAMI,aAAahB,GAAGE,OAASU,EAAMlB,MAAMI,GAAGE,GAAGE,QACpFU,EAAMlB,MAAMI,GAAGE,GAAGG,SAAU,EAC5BS,EAAMlB,MAAMkB,EAAMI,aAAalB,GAAGc,EAAMI,aAAahB,GAAGG,SAAU,GAGtES,EAAMnB,cAKCkB,EAAYJ,EAAaU,QAAzBN,QACFO,EAAc,SAACN,GAAD,OAAWA,EAAMnB,QAAQC,MAAMyB,QAC3CZ,IAAf,Q,OC7CO,SAASa,IACd,IAAM1B,EAAQ2B,YAAYH,GAGzBI,QAAQC,IAAI7B,GAEb,IAAM8B,EAAWC,cACXC,EAAc,SAACC,GACnBH,EAASb,EAAQgB,EAAEC,OAAOC,MAG5B,OACE,mCACE,qBAAKC,UAAU,SAAf,SACCpC,EAAMqC,KAAI,SAACC,EAAMC,GAAP,OAAc,wBAAQC,MAAO,CAACC,MAAM,GAAD,OAAK,GAAL,KAAeC,WAAY,YAAaN,UAAU,OAAOD,GAAII,EAAeI,QAASX,EAAaY,SAAUN,EAAK7B,QAAtI,SACnB6B,EAAK7B,QAAe6B,EAAK9B,MAAV,IADgG+B,U,MCJ5GM,MAXf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sEACA,cAACV,EAAD,UCNKoB,EAAQC,YAAe,CAClCC,QAAS,CACPjD,QAASkD,KCGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.02b87d63.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Array(N).fill(null).map(() => Array(N))\n\nconst size = 4;\nconst initialState = {counter: 1, cells: Array.from(Array(size), () => new Array(size))};\n\nlet val = 1;\nfor(let i = 0; i< initialState.cells.length; i++) {\n  \n  for (let j = 0; j< initialState.cells[i].length; j++) {\n    if (val == size * (size / 2) + 1) {\n      val = 1;\n    }\n    initialState.cells[i][j] = {value: val, visible: false};\n    val++;\n  }\n}\nfor(let j = 0; j < 20; j++) {\n  for(let i = 0; i< initialState.cells.length; i++) {\n    initialState.cells[i].sort(() => Math.random() - 0.5);\n    initialState.cells.sort(() => Math.random() - 0.5);\n  }\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    addElem: (state, action) => {\n      \n      let i = Math.trunc(action.payload / size);\n      let j = action.payload - Math.trunc(action.payload / size) * size;\n\n      state.cells[i][j].visible = true;\n        if (state.counter % 2 != 0) {\n          state.previusValue = {i: i, j: j};\n        } else {\n          if(state.cells[state.previusValue.i][state.previusValue.j].value != state.cells[i][j].value) {\n            state.cells[i][j].visible = false;\n            state.cells[state.previusValue.i][state.previusValue.j].visible = false;\n          }\n        }\n        state.counter++;\n    },\n  },\n});\n\nexport const { addElem } = counterSlice.actions;\nexport const selectCells = (state) => state.counter.cells.flat();;\nexport default counterSlice.reducer;\n\n \n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {  addElem,  selectCells } from './counterSlice';\n\n\nexport function Counter() {\n  const cells = useSelector(selectCells);\n  // const arrCells = cells.flat();\n  // const oneDimArr = cells.reduce((a, b) => [...a, ...b], []);\n   console.log(cells);\n  \n  const dispatch = useDispatch();\n  const handleClick = (e) => {\n    dispatch(addElem(e.target.id));\n  }\n\n  return (\n    <>\n      <div className=\"memory\" >\n      {cells.map((item, idx)=> <button style={{width: `${100/4}%`, transition: \"all 0.5s\"}} className=\"cell\" id={idx} key={idx} onClick={handleClick} disabled={item.visible}>\n          {!item.visible ? \"\" : item.value}\n        </button>)} \n      </div>\n   \n    </>\n   );\n}","import React from 'react';\nimport { Counter } from './features/counter/Counter';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Память</h3>\n        <Counter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}